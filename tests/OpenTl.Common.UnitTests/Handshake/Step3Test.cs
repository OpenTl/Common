using OpenTl.Common.Auth.Client;
using OpenTl.Common.Extensions;
using OpenTl.Common.UnitTests.Old;
using OpenTl.Schema;
using OpenTl.Schema.Serialization;
using Xunit;

namespace OpenTl.Common.UnitTests.Handshake
{
    public class Step3Test
    {
        private readonly byte[] _newNonce =
        {
            208, 183, 189, 186, 32, 95, 36, 151, 0, 25, 204, 212, 81, 227, 191, 169, 232, 236, 66, 99, 21, 67, 53, 128,
            30, 41, 120, 166, 228, 79, 11, 153
        };

        private readonly byte[] _nonce = {61, 100, 109, 100, 90, 13, 210, 14, 33, 231, 178, 151, 163, 232, 251, 161};

        private readonly byte[] _serverNonce =
            {143, 176, 209, 27, 172, 203, 110, 107, 175, 23, 122, 86, 106, 127, 153, 137};

        private readonly byte[] _encryptedData =
        {
            230, 61, 215, 144, 4, 83, 250, 125, 23, 189, 10, 108, 212, 76, 186, 72, 78, 82, 227, 173, 225, 100, 220, 55,
            174, 206, 76, 117, 110, 255, 195, 180, 3, 28, 103, 165, 1, 32, 218, 74, 35, 106, 185, 185, 180, 194, 56,
            168, 205, 39, 9, 99, 195, 159, 40, 86, 232, 175, 40, 167, 178, 102, 30, 214, 226, 11, 150, 108, 159, 33, 57,
            8, 25, 87, 88, 109, 138, 154, 163, 81, 207, 130, 208, 9, 241, 100, 56, 137, 13, 55, 70, 216, 36, 27, 173,
            69, 61, 200, 155, 83, 51, 18, 236, 191, 118, 52, 238, 157, 161, 40, 27, 119, 180, 255, 67, 33, 92, 231, 3,
            254, 82, 32, 127, 51, 150, 63, 246, 205, 203, 17, 211, 2, 165, 45, 111, 137, 151, 105, 117, 109, 42, 106, 3,
            150, 171, 156, 190, 36, 36, 231, 240, 52, 188, 249, 111, 116, 6, 223, 9, 233, 229, 118, 42, 250, 78, 35,
            127, 124, 55, 215, 47, 27, 156, 118, 216, 2, 122, 72, 187, 17, 11, 229, 37, 36, 212, 118, 125, 78, 34, 87,
            76, 78, 72, 82, 82, 211, 230, 81, 30, 240, 131, 188, 109, 86, 80, 0, 132, 214, 11, 89, 247, 34, 180, 86, 65,
            194, 209, 84, 34, 123, 112, 62, 221, 58, 41, 62, 251, 245, 185, 158, 79, 166, 166, 147, 14, 68, 190, 75,
            168, 82, 253, 174, 177, 68, 13, 53, 7, 212, 142, 169, 10, 239, 113, 160, 56, 14, 203, 87, 130, 52, 103, 129,
            199, 156, 170, 238, 184, 221, 11, 186, 20, 217, 166, 105, 189, 68, 238, 2, 202, 214, 91, 37, 203, 117, 230,
            2, 133, 44, 50, 62, 113, 9, 231, 33, 75, 100, 224, 199, 141, 245, 31, 76, 110, 142, 234, 120, 75, 185, 146,
            46, 127, 202, 217, 183, 171, 65, 24, 214, 43, 71, 103, 135, 79, 22, 44, 105, 206, 70, 179, 13, 222, 20, 52,
            164, 101, 115, 87, 212, 22, 26, 15, 166, 180, 96, 214, 207, 34, 1, 252, 0, 93, 26, 81, 102, 133, 101, 79,
            83, 60, 214, 30, 209, 243, 74, 88, 57, 87, 190, 210, 149, 228, 86, 92, 45, 71, 142, 149, 135, 36, 5, 142,
            23, 144, 185, 83, 213, 13, 146, 152, 17, 132, 59, 177, 52, 36, 223, 142, 126, 19, 236, 195, 227, 250, 29,
            225, 24, 204, 192, 84, 243, 51, 218, 236, 195, 13, 209, 141, 182, 41, 56, 155, 33, 12, 254, 22, 246, 41,
            141, 152, 19, 131, 186, 230, 156, 137, 67, 98, 197, 199, 184, 16, 18, 180, 116, 249, 136, 253, 88, 6, 153,
            111, 189, 62, 95, 70, 102, 163, 185, 44, 246, 163, 119, 7, 6, 171, 125, 124, 175, 40, 252, 180, 88, 96, 171,
            210, 4, 157, 166, 42, 66, 149, 20, 4, 106, 43, 158, 201, 218, 156, 46, 183, 147, 6, 40, 210, 132, 220, 90,
            24, 79, 220, 53, 79, 58, 170, 80, 104, 58, 173, 111, 74, 206, 94, 105, 216, 152, 63, 191, 254, 41, 184, 172,
            76, 6, 134, 186, 58, 145, 146, 86, 222, 134, 229, 129, 228, 178, 176, 148, 231, 214, 91, 138, 239, 177, 34,
            150, 154, 111, 142, 126, 104, 210, 112, 138, 10, 66, 178, 160, 96, 17, 138, 50, 105, 244, 177, 77, 7, 86,
            34, 134, 112, 255, 144, 186, 225, 158, 202, 25, 211, 166, 64, 102, 255, 209, 244, 69, 214, 254, 252, 191,
            21, 101
        };

        [Fact]
        public void ValidateTest()
        {
            var paramsOk = new TServerDHParamsOk
            {
                EncryptedAnswerAsBinary = _encryptedData,
                Nonce = _nonce,
                ServerNonce = _serverNonce
            };

            var packageBuffer = Serializer.Serialize(paramsOk);
            var packageData = packageBuffer.ToArray();

            var completeDhExchange = new Step3CompleteDhExchange();
            var oldResponse = completeDhExchange.ToBytes(_nonce, _serverNonce, _newNonce, _encryptedData);


            var response = Step3ClientHelper.GetRequest(paramsOk, _newNonce, out var clientAgree, out var serviceTime);
        }
    }
}